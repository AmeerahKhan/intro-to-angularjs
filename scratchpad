AngularJS Intro:

- extension to html
- what googles vision for "web components" are
  - isolated pieces of html, css, js working to create a rich experience
- can do what other client-side frameworks like backbone/ember can, but offers a lot more
- "data-binding" baked in
- write less, do more

1. Module system

app/js/app.js

angular.module("app", [])

- defines a spot to stick the stuff that belogns in this "application"
- could be scoped smaller
- the [] are intended to list any dependencies that this module might need, more later

2. How do we make our app aware of the app and "wire it up" ?

index.html

html ng-app="app"

- this is a built in "directive" that tells angular to "bootstrap" this HTML element so that it knows about our app module
- the wiring happens automatically

3. Routing / "Pages", How do we handle transitions?

app/js/app.js

.config(['$routeProvider', function($routeProvider) {

  $routeProvider.when('/login', {
    templateUrl: 'login.html',
    controller: 'LoginController'
  });

  $routeProvider.otherwise({ redirectTo: '/login' });

}]);

- dependency injection, more on that later
- default route
- a controller to handle the "context" for that "page"
- where does it get injected?

index.html

<div id="view" ng-view></div>

- ng-view is an angular directive that tells angular, "this is where you should inject the templates that come from this scopes routeProvider when a route is matched"

- the default behaviour is that angular will fetch the template provided at templateUrl, and cache it internally so it doesn't have to fetch it again

- we need a controller, so things don't blow up

app/js/app.js

angular.module("app").controller("LoginController", function($scope) {

});
